#!/usr/bin/env python
# -*- coding: utf-8 -*-
import click


@click.group()
@click.pass_context
def cli(ctx):
    pass


@cli.group()
@click.pass_context
def utils(ctx):
    pass


@utils.command()
@click.option('--minor', is_flag=True)
@click.option('--major', is_flag=True)
@click.pass_context
def make_release(ctx, minor, major):
    import os
    import subprocess

    from mozbase import __version__
    from mozbase.cli import (
        compute_semver, set_filename_version, flags_to_release)

    current_version = __version__
    release = flags_to_release(is_minor=minor, is_major=major)
    release_version, next_version = compute_semver(current_version, release)

    this_filepath = os.path.dirname(__file__)
    rootpath = os.path.abspath(os.path.join(this_filepath, '..'))

    init_filepath = os.path.join(rootpath, 'mozbase/__init__.py')
    setup_filepath = os.path.join(rootpath, 'setup.py')

    set_filename_version(init_filepath, release_version, '__version__')
    set_filename_version(setup_filepath, release_version, 'version')

    for filename in ('mozbase/__init__.py', 'setup.py'):
        subprocess.call(['git', 'add', filename], cwd=rootpath)

    subprocess.call(
        ['git', 'commit', '-am', 'This is mozbase ' + release_version],
        cwd=rootpath,
    )
    subprocess.call(
        ['git', 'tag', '-a', release_version, '-m', 'mozbase ' + release_version],
        cwd=rootpath,
    )

    set_filename_version(init_filepath, next_version, '__version__')
    set_filename_version(setup_filepath, next_version, 'version')

    subprocess.call(
        ['git', 'commit', '-am', 'This is mozbase ' + next_version],
        cwd=rootpath,
    )
    subprocess.call(
        ['git', 'push', 'github', 'master:master', '--tags'], cwd=rootpath)


if __name__ == '__main__':
    cli(obj={})
